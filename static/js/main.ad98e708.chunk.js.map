{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAOMA,EACC,mCADDA,EAEE,2CAoGOC,MAlGf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGiBF,mBAAS,IAH1B,mBAGNG,EAHM,KAGGC,EAHH,KAoDb,OAEE,qBAAKC,UACqB,oBAAhBF,EAAQG,MACbH,EAAQG,KAAKC,KAAO,GACnB,WAEF,MALJ,SAOE,iCAEE,qBAAKF,UAAU,aAAf,SACE,uBACEG,KAAO,OACPH,UAAU,aACVI,YAAY,WACZC,SAAU,SAAAC,GAAC,OAAGT,EAASS,EAAEC,OAAOC,QAChCA,MAAOZ,EACPa,WA1CK,SAAAC,GACE,UAAZA,EAAIC,KACLC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACvDoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,WAsCW,oBAAhBlB,EAAQG,KACf,gCACE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQqB,KAAnC,KAA2CrB,EAAQsB,IAAIC,WACvD,qBAAKrB,UAAU,OAAf,SArCQ,SAACsB,GACnB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GA4BDE,CAAY,IAAIC,WAGzC,qBAAKhC,UAAU,cAAf,SACE,gCACE,sBAAKA,UAAU,OAAf,UACGiC,KAAKC,MAAMpC,EAAQG,KAAKC,MAD3B,WAGA,qBAAKF,UAAU,UAAf,SACGF,EAAQA,QAAQ,GAAGG,eAKzB,SC1FEkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ad98e708.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n// const api = {\n//   key:\"8a592f8e5amsh28c8785ea2837dcp1f3ce3jsnb6f763cacf49\",\n//   base: \"https://community-open-weather-map.p.rapidapi.com\",\n// }\n\nconst api = {\n  key: \"ed79e34fe63f970b84b6e9d936883486\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\nfunction App() {\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  // const search = evt => {\n  //   if (evt.key === \"Enter\") {\n  //     fetch(`${api.base}/forecast?q=${query}`, {\n  //       \"method\": \"GET\",\n  //       \"headers\": {\n  //           \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n  //           \"x-rapidapi-key\": `${api.key}`\n  //       }\n  //     })\n  //     .then(response => {\n    \n  //         return response.json();\n  //     })\n  //     .then(function(data){\n  //         console.log(data);\n  //         // initialize(data);\n  //     })\n  //     .catch(err => {\n  //         console.log(err);\n  //     });\n  //   }\n  // }\n\n  const search = evt => {\n    if(evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n          console.log(result);\n        });\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  return (\n\n    <div className={\n      (typeof weather.main != \"undefined\") \n      ? (weather.main.temp > 16 \n        ? 'app warm' \n        : 'app') \n      : 'app'} >\n\n      <main>\n\n        <div className=\"search-box\">\n          <input \n            type = \"text\" \n            className=\"search-bar\"\n            placeholder=\"Seach...\"\n            onChange={e=> setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n\n            <div className=\"weather-box\">\n              <div>\n                <div className=\"temp\"> \n                  {Math.round(weather.main.temp)}Â°C\n                </div>\n                <div className=\"weather\">\n                  {weather.weather[0].main}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : ('') }\n\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}